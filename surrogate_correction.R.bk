library(minfi)
library(ruv)
library(missMethyl)
library(limma)

### Variable selection for analysis ###
interest.vars <- variablesOfInterest(pdata, batch.vars)
int.formula <- paste(interest.vars, collapse=' + ')
if (int.formula == '') {
	int.formula <- ~ 1
} else {
	int.formula <- as.formula(paste0('~ ', int.formula))
}
design <- model.matrix(int.formula, data=targets2)

#### Batch correction and analysis ####
topAdj <- function(fit, coef=1) {
	coefficients <- fit$coefficients[,coef,drop=F]
	t <- fit$t[,coef]
	p <- fit$p[,coef]
	ID <- rownames(coefficients)
	slots <- attributes(fit)$names

	tab <- data.frame(row.names = ID, coefficients = coefficients, t = t, p = p,
					  stringsAsFactors = FALSE, check.names = FALSE)
	if ("p.BH" %in% slots)
		tab <- data.frame(tab, p.BH = fit$p.BH[,coef,drop=F], stringsAsFactors = FALSE, 
						  check.names = FALSE)
	if ("p.rsvar" %in% slots) 
		tab <- data.frame(tab, p.rsvar = fit$p.rsvar[,coef,drop=F], stringsAsFactors = FALSE,
						  check.names = FALSE)
	if ("p.rsvar.BH" %in% slots)
		tab <- data.frame(tab, p.rsvar.BH = fit$p.rsvar.BH[,coef,drop=F],
						  stringsAsFactors = FALSE, check.names = FALSE)
	if ("p.evar" %in% slots)
		tab <- data.frame(tab, p.evar = fit$p.evar[,coef,drop=F], stringsAsFactors = FALSE,
						  check.names = FALSE)
	if ("p.evar.BH" %in% slots)
		tab <- data.frame(tab, p.evar.BH = fit$p.evar.BH[,coef,drop=F],
						  stringsAsFactors = FALSE, check.names = FALSE)
	if ("p.rsvar.ebayes" %in% slots)
		tab <- data.frame(tab, p.rsvar.ebayes = fit$p.rsvar.ebayes[,coef,drop=F], 
						  stringsAsFactors = FALSE, check.names = FALSE)
	if ("p.rsvar.ebayes.BH" %in% slots)
		tab <- data.frame(tab, p.rsvar.ebayes.BH = fit$p.rsvar.ebayes.BH[,coef,drop=F], 
						  stringsAsFactors = FALSE, check.names = FALSE)
	if ("p.ebayes" %in% slots)
		tab <- data.frame(tab, p.ebayes = fit$p.ebayes[,coef,drop=F], stringsAsFactors = FALSE,
						  check.names = FALSE)
	if ("p.ebayes.BH" %in% slots)
		tab <- data.frame(tab, p.ebayes.BH = fit$p.ebayes.BH[,coef,drop=F],
						  stringsAsFactors = FALSE, check.names = FALSE)	
	return(tab)
}

mval <- getM(filtered.norm.meth)
mval <- mval[!apply(is.na(mval), 1, any),]
### Selection of negative control probes ###
## k determination for RUVrinv ##
inc <- getINCs(filtered.raw.meth) # 'missMethyl' package
m.inc <- rbind(mval, inc)
ctl <- rownames(m.inc) %in% rownames(inc)

pca <- prcomp(t(m.inc))
k <- sum(summary(pca)$importance[2,] >= varianceProportion)

## Plot PCA from uncorrected data ##
library(ggplot2)
if (! isEmpty(interest.vars)) {
	for (my.var in interest.vars) {
		groups <- targets2[,my.var]
		names(groups) <- row.names(targets2)
		if (class(groups) %in% c('character', 'factor')) {
			ggsave(file=file.path(wd, paste0('PCA_raw_', my.var, '.png')), plot.ica(ica.res, groups, main=my.var), width=20)
		}
	}
}

## Probe selection ##
fit <- RUVrinv(t(m.inc), design[,-1,drop=F], ctl=ctl, k=k) # 'ruv' package
fit <- missMethyl:::.toMArrayLM(fit) # 'missMethyl' package
fit <- RUVadj(fit) # 'missMethyl' package
ctl <- rownames(mval) %in% row.names(m.inc)[!apply(fit$p.ebayes.BH <= 0.5, 1, any)]

### Differential methylation analysis correcting for surrogate variables ###
fit <- RUVrinv(t(mval), design[,-1,drop=F], ctl=ctl, k=k) # 'ruv' package
fit <- missMethyl:::.toMArrayLM(fit) # 'missMethyl' package
fit <- RUVadj(fit) # 'missMethyl' package

### Transormation of M-values and beta-values ###
mval.clean <- removeBatchEffect(mval, covariates=t(fit$W), design=design) # 'limma' package
beta.clean <- 2^mval.clean/(1+2^mval.clean)

## ICA analysis for corrected data ##
ica.corrected <- icafast(mval.clean, nc=ncol(m.inc))

# Plot ICA #
if (! isEmpty(interest.vars) {
	for (my.var in interest.vars) {
		groups <- targets2[,my.var]
		names(groups) <- row.names(targets2)
		if (class(groups) %in% c('character', 'factor')) {
			ggsave(file=file.path(wd, paste0('ICA_corrected_', my.var, '.png')), plot.ica(ica.corrected, targets2[,my.var], main=my.var), width=20)
		}
	}
}

### Results output ###
for(coef in 1:ncol(fit$coefficients)) {
	top <- topAdj(fit, coef)
	top <- cbind(top, array.annot[row.names(top),])
	filename <- paste(colnames(top)[1], 'diffMeth.txt', sep='_')
	write.table(top, file.path(wd, filename), sep="\t", row.names=F, quote=F)
	sig <- row.names(top)[top$p.ebayes.BH <= 0.05]
	hc <- hclust(dist(t(mval[sig,])))
}
#fitvar <- varFit(mval, design=design, coef=c(1,2)) # 'missMethyl' package
#topDV <- topVar(fitvar, coef=2, num=nrow(top2)) # 'missMethyl' package

## Ouptut transformed data ##
save(mval.clean, beta.clean, file=file.path(wd, 'transormed_data.RData'))
mval.out <- mval.clean
colnames(mval.out) <- paste0('Mval.', colnames(mval.out))
mval.out <- cbind(data.frame(mval.out, stringsAsFactors=F), array.annot[rownames(mval.out),])
write.table(mval.out, file.path(wd, 'Mvalue_batchCorrection.txt'), sep="\t", row.names=F, quote=F)
beta.out <- beta.clean
colnames(beta.out) <- paste0('Beta.', colnames(beta.out))
beta.out <- cbind(data.frame(beta.out, stringsAsFactors=F), array.annot[rownames(beta.out),])
write.table(beta.out, file.path(wd, 'Beta_batchCorrection.txt'), sep="\t", row.names=F, quote=F)

#x <- cor(beta.clean, transformed.betas[row.names(beta.clean),])
